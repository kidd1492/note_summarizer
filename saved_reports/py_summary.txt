========================================
SUMMARY REPORT: FILES
========================================

Total Files: 9

Filenames:
- main.py
- base_analyzer.py
- html_analyzer.py
- js_analyzer.py
- python_analyzer.py
- base_report_gen.py
- charts.py
- data_explorer.py
- report_helper.py

----------------------------------------
File: main.py
----------------------------------------

Import:
    from reports import report_helper
    from analyzers import base_analyzer
    import os, re, sys
    from pathlib import Path

Comment:
    #main function processes command line arguments
    #  check for reports or path to directory

Function:
    def main():

Main_entry:
    if __name__ == "__main__":

----------------------------------------
File: base_analyzer.py
----------------------------------------

Import:
    from analyzers import html_analyzer, python_analyzer, js_analyzer
    import os, csv

Comment:
    # Mapping of file extensions to their respective analyzers
    # Add more file types and analyzers if needed
    #called from main.main() takes file list for each file type it check
    #if there is an analyzer then hands the list off to analyzer to process lines
    '''function to walk through a directory pick what kinds of file it wants
    # Check if the file's extension is in the allowed list
    # Initialize the list for this file type if not already present
    # Append the file path to the appropriate list
    #function creates the summary file and clears all info then writes the header.
    #function appends the csv data returned by the analyzer to the csv summary file.

Function:
    def generate_csv(directory):
    def gather_categorized_files(directory):
    def create_csv_summary():
    def write_csv_summary(csv_data):

Return:
    return categorized_files

Todo:
    #TODO fix this to be one function??

----------------------------------------
File: html_analyzer.py
----------------------------------------

Import:
    import re

Comment:
    """Process each line and store relevant data for CSV."""
    #tag_pattern = r"<([a-zA-Z1-6]+)[^>]*>"
    # Initialize a dictionary for each line's data
    # Skip problematic lines quietly
    # Skip the entire file if there are issues

Function:
    def process_line_for_csv(file_list):

Return:
    return csv_data

Exception_handling:
    try:
    try:

----------------------------------------
File: js_analyzer.py
----------------------------------------

Import:
    import os
    import re

Comment:
    """Process .js files and extract relevant information for CSV."""
    # Normalize the file path for cross-platform compatibility
    # Skip files that are not .js
    # Initialize a dictionary for each line's data
    # Classify line content
    # Add the row to the CSV data list
    # Skip problematic lines quietly
    # Skip the entire file if there are issues

Function:
    def process_line_for_csv(file_list):

Return:
    return csv_data

Exception_handling:
    try:
    try:

----------------------------------------
File: python_analyzer.py
----------------------------------------

Import:
    import os
    import re

Comment:
    """Process each line and store relevant data for CSV."""
    # Normalize the file path for cross-platform compatibility
    # Initialize a dictionary for each line's data
    # Classify line content
    # Add the row to the CSV data list
    # Skip problematic lines quietly
    # Skip the entire file if there are issues

Function:
    def process_line_for_csv(file_list):

Return:
    return_pattern = r"^return"
    return csv_data

Exception_handling:
    try:
    try:

----------------------------------------
File: base_report_gen.py
----------------------------------------

Import:
    import pandas as pd

Comment:
    # Read CSV
    # Filter by FileType (use any file type dynamically)
    # Write FileType summary
    # List all filenames
    # Process each file
    # Extract content of a specific Type

Function:
    def generate_summary_report(file_type, report_file):

----------------------------------------
File: charts.py
----------------------------------------

Import:
    import matplotlib.pyplot as plt
    import pandas as pd

Comment:
    # Calculate percentages of each file type
    # Create pie chart
    # Set up the figure and subplots
    # Pie chart for file type percentages
    # Pie charts for each file type's data breakdown
    # Adjust layout and display

Function:
    def type_percent_chart():
    def data_percent_chart():

----------------------------------------
File: data_explorer.py
----------------------------------------

Import:
    from reports import report_helper
    import pandas as pd
    import os

Comment:
    #opens and reads csv ask user what type of file walks through process
    #function displays all files gives user opptions: all, save, select file
    # function displays all data types avalable ask user to select one.
    # all will print all data for the selection.

Function:
    def file_type():
    def select_file(df, selected_file_type):
    def select_data(df, selected_file, selected_file_type, type):
    def clear_screen():

----------------------------------------
File: report_helper.py
----------------------------------------

Import:
    import pandas as pd
    import sys, os
    from reports import base_report_gen, data_explorer, charts

Comment:
    #opens and reads csv ask user what type of file walks through process

Function:
    def main_menu():
    def charts_menu():
    def save_file_menu(df):
    def clear_screen():

