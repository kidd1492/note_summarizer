
Analyzed Files:
C:/Users/chris/Desktop/note_summarizer\main.py

Imports:

from analyzers import PythonProjectAnalyzer
import os, re
def main():
def get_directory():

Analyzed Files:
C:/Users/chris/Desktop/note_summarizer\test.py

Imports:

from analyzers import BaseAnalyzer
import re, os

Analyzed Files:
C:/Users/chris/Desktop/note_summarizer\tokenizer.py

Imports:

import nltk

Analyzed Files:
C:/Users/chris/Desktop/note_summarizer\analyzers\base_analyzer.py

Imports:

import os, re
class BaseAnalyzer:
def __init__(self, directory):
def gather_files(self, allowed_extensions=None):
def clean_file(self):
def gather_comments(self):

Analyzed Files:
C:/Users/chris/Desktop/note_summarizer\analyzers\python_analyzer.py

Imports:

import re, os
class PythonProjectAnalyzer(BaseAnalyzer):
def __init__(self, directory):
def gather_files(self, allowed_extensions=None):
def get_functions(self):
def get_imports(self):
def write_report(self):
def write_comments(self, out_file):
def analize(self):
def full_report(self):

Analyzed Files:
C:/Users/chris/Desktop/note_summarizer\analyzers\__init__.py

Imports:



Python Comments:
''' ask user for filepath '''
#Create object lemmatizer
# Example: Frequency-based summarization
''' Initialize the analyzer with a target directory'''
'''Gather all .py files in directory'''
# Skip .git directories entirely and enve
# Check if the file's extension is in the allowed list
'''
'''
'''TODO get better doc string
''' Initialize the analyzer with a target directory'''
'''Gather only Python (.py) files'''
"""gather all function decorators in files"""
'''gathers all import statements from files'''
'''TODO write function for get classes
'''funtion to get comments and docstring append to report'''
''''
'''
'''Full reort file, imports, functions for each file'''
#self.write_comments(self.summary_report)
